diff -uprN libarib25-org/CMakeLists.txt libarib25/CMakeLists.txt
--- libarib25-org/CMakeLists.txt	2019-02-05 09:49:43.000000000 +0900
+++ libarib25/CMakeLists.txt	2023-04-07 13:08:46.130708262 +0900
@@ -1,4 +1,6 @@
-cmake_minimum_required(VERSION 2.8.5)
+cmake_minimum_required(VERSION 2.8.12)
+
+set(CMAKE_VERBOSE_MAKEFILE TRUE)
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
 set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE INTERNAL "limit build types" FORCE)
@@ -12,12 +14,12 @@ enable_language(CXX)
 include(GitRevision)
 include(GenerateExportHeader)
 include(GNUInstallDirs)
-find_package(PCSC REQUIRED)
+
+find_package(YAKISOBA REQUIRED)
+find_package(SOBACAS REQUIRED)
 
 if (UNIX OR MSYS)
 	find_program(LDCONFIG_EXECUTABLE "ldconfig")
-	set(WITH_PCSC_PACKAGE "libpcsclite" CACHE STRING "pkg-config package name for PC/SC")
-	set(WITH_PCSC_LIBRARY "" CACHE STRING "library name for PC/SC")
 endif()
 
 if(WIN32)
@@ -98,17 +100,21 @@ endif()
 
 add_definitions("-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64")
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
-if(PCSC_INCLUDE_DIRS)
-	include_directories(${PCSC_INCLUDE_DIRS})
+if(LIBSOBACAS_INCLUDE_DIRS)
+	include_directories(${LIBSOBACAS_INCLUDE_DIRS})
 endif()
-link_directories(${PCSC_LIBRARY_DIRS})
+link_directories(${LIBSOBACAS_LIBRARY_DIRS})
+
+include_directories(${LIBYAKISOBA_INCLUDE_DIRS})
+link_directories(${LIBYAKISOBA_LIBRARY_DIRS})
 
 add_library(arib25-objlib OBJECT src/arib_std_b25.c src/b_cas_card.c src/multi2.cc src/ts_section_parser.c src/version.c)
 set_target_properties(arib25-objlib PROPERTIES COMPILE_DEFINITIONS ARIB25_DLL)
 
 add_library(arib25-static STATIC $<TARGET_OBJECTS:arib25-objlib>)
 set_target_properties(arib25-static PROPERTIES OUTPUT_NAME ${ARIB25_LIB_NAME})
-target_link_libraries(arib25-static PRIVATE ${PCSC_LIBRARIES})
+target_link_libraries(arib25-static PRIVATE ${LIBSOBACAS_LIBRARIES})
+target_link_libraries(arib25-static PRIVATE ${LIBYAKISOBA_LIBRARIES})
 
 add_library(arib25-shared SHARED $<TARGET_OBJECTS:arib25-objlib> ${CMAKE_CURRENT_BINARY_DIR}/version.rc)
 set_target_properties(arib25-shared PROPERTIES MACOSX_RPATH ON)
@@ -117,13 +123,13 @@ set_target_properties(arib25-shared PROP
 set_target_properties(arib25-shared PROPERTIES OUTPUT_NAME ${ARIB25_LIB_NAME})
 set_target_properties(arib25-shared PROPERTIES SOVERSION ${ARIB25_MAJOR_VERSION})
 set_target_properties(arib25-shared PROPERTIES VERSION ${ARIB25_VERSION_NUMBER})
-target_link_libraries(arib25-shared PRIVATE ${PCSC_LIBRARIES})
+target_link_libraries(arib25-shared PRIVATE ${LIBSOBACAS_LIBRARIES})
+target_link_libraries(arib25-shared PRIVATE ${LIBYAKISOBA_LIBRARIES})
 generate_export_header(arib25-shared BASE_NAME arib25_api EXPORT_FILE_NAME arib25_api.h)
 
 add_executable(b25 src/td.c ${CMAKE_CURRENT_BINARY_DIR}/version.rc)
 set_target_properties(b25 PROPERTIES OUTPUT_NAME ${ARIB25_CMD_NAME})
-target_link_libraries(b25 PRIVATE ${PCSC_LIBRARIES})
-target_link_libraries(b25 PRIVATE arib25-shared)
+target_link_libraries(b25 PUBLIC arib25-shared ${LIBSOBACAS_LIBRARIES} ${LIBYAKISOBA_LIBRARIES}  )
 
 configure_file(src/config.h.in config.h @ONLY)
 configure_file(src/version.rc.in version.rc @ONLY)
diff -uprN libarib25-org/cmake/FindSOBACAS.cmake libarib25/cmake/FindSOBACAS.cmake
--- libarib25-org/cmake/FindSOBACAS.cmake	1970-01-01 09:00:00.000000000 +0900
+++ libarib25/cmake/FindSOBACAS.cmake	2023-04-07 13:18:40.501851440 +0900
@@ -0,0 +1,9 @@
+
+# load the module to use pkg-config
+find_package(PkgConfig)
+
+# search library with pkg-config and name its results "LIBSOBACAS"
+pkg_check_modules(LIBSOBACAS REQUIRED libsobacas)
+
+# use the variable <RESULTNAME>_INCLUDE_DIRS to get include paths
+include_directories(${LIBSOBACAS_INCLUDE_DIRS})
diff -uprN libarib25-org/cmake/FindYAKISOBA.cmake libarib25/cmake/FindYAKISOBA.cmake
--- libarib25-org/cmake/FindYAKISOBA.cmake	1970-01-01 09:00:00.000000000 +0900
+++ libarib25/cmake/FindYAKISOBA.cmake	2023-04-07 13:18:46.701759270 +0900
@@ -0,0 +1,9 @@
+
+# load the module to use pkg-config
+find_package(PkgConfig)
+
+# search library with pkg-config and name its results "LIBYAKISOBA"
+pkg_check_modules(LIBYAKISOBA REQUIRED libyakisoba)
+
+# use the variable <RESULTNAME>_INCLUDE_DIRS to get include paths
+include_directories(${LIBYAKISOBA_INCLUDE_DIRS})
